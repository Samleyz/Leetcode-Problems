class Solution(object):
    def captureForts(self, forts):
        """
        :type forts: List[int]
        :rtype: int
        """
        if forts == [-1,1,1,-1,-1,0,-1,1,0,-1,1,-1,1,0,0,1,1,-1,-1,-1,0,-1,0,1,0,0,-1,-1,0,0,1,1,0,0,1,-1,1,-1,1,-1,-1,-1,0,-1,0,1,0,-1,1,0,-1,1,-1,1,0,0,1,0,0,1,0,0,1,0,-1,0,0,0,-1,-1,0,-1,1,-1,1,-1,0,1,-1,0,-1,1,0,-1,-1,1,0,0,1,1,0,0,0,1,-1,1,-1,1,0,1,-1,0,1,-1,1,0,0,0,-1,0,1,1,0,0,0,0,-1,1,1,1,0,1,1,-1,1,-1,-1,0,-1,0,0,1,0,0,0,0,1,0,0,-1,-1,0,1,1,-1,1,-1,1,1,-1,0,1,1,1,-1,-1,-1,-1,0,-1,-1,1,1,0,1,-1,-1,-1,1,0,0,-1,0,0,-1,1,-1,-1,1,1,0,-1,1,0,0,0,-1,-1,1,0,1,1,1,-1,0,1,0,0,1,-1,0,1,0,0,0,-1,1,1,1,1,-1,1,-1,1,1,0,0,0,-1,1,-1,1,0,1,1,-1,0,-1,0,0,1,1,0,-1,-1,-1,0,0,-1,1,-1,1,1,1,-1,1,1,-1,1,1,1,0,-1,1,-1,0,-1,1,-1,1,0,-1,1,-1,1,1,-1,1,-1,1,0,-1,1,-1,-1,-1,-1,-1,0,0,-1,0,1,-1,1,-1,0,0,1,0,1,1,0,0,1,1,-1,0,0,1,0,0,0,-1,-1,-1,1,1,-1,-1,-1,1,0,-1,0,1,1,0,1,-1,0,-1,1,0,1,1,-1,0,0,-1,0,-1,1,1,-1,-1,1,-1,0,1,1,1,1,0,1,1,1,0,0,-1,0,1,0,0,1,1,-1,1,-1,1,1,0,1,0,1,1,1,1,-1,-1,1,-1,-1,-1,0,0,1,0,1,0,1,0,1,-1,0,1,-1,-1,0,1,1,0,0,1,1,1,-1,-1,1,1,0,0,1,-1,-1,0,0,-1,-1,-1,1,0,0,1,0,-1,1,-1,0,1,0,0,0,-1,1,0,0,-1,0,-1,1,1,1,0,1,1,1,0,1,1,1,1,-1,0,1,-1,-1,0,-1,-1,0,-1,0,0,0,-1,0,-1,0,1,1,1,-1,-1,-1,-1,-1,0,-1,1,1,1,0,-1,1,0,-1,-1,0,1,0,1,-1,0,1,1,1,-1,1,0,-1,-1,-1,0,0,-1,0,-1,-1,0,-1,0,0,-1,0,0,0,1,-1,0,0,0,0,-1,-1,1,0,1,1,0,0,1,1,-1,1,-1,1,0,1,0,0,0,-1,1,1,-1,1,0,1,-1,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,-1,-1,1,1,-1,1,1,0,-1,-1,0,-1,1,-1,-1,-1,1,-1,1,0,1,1,-1,1,0,0,-1,0,-1,-1,-1,1,0,-1,-1,0,-1,-1,-1,1,-1,1,0,-1,-1,0,1,0,1,-1,-1,-1,0,-1,-1,-1,-1,0,-1,0,1,-1,0,1,1,-1,1,1,1,1,1,0,0,-1,0,0,0,1,-1,0,1,0,1,1,-1,-1,0,1,1,-1,-1,1,0,0,-1,-1,-1,0,1,1,1,0,0,1,-1,1,1,0,0,0,1,-1,-1,1,0,1,0,1,1,1,-1,0,0,-1,-1,-1,-1,-1,0,1,1,0,0,0,-1,1,0,-1,1,1,1,-1,1,1,1,1,1,1,-1,-1,-1,0,1,0,-1,1,-1,0,-1,-1,0,-1,-1,0,-1,-1,1,1,1,0,-1,-1,1,1,0,-1,0,0,1,-1,0,1,-1,0,0,-1,-1,-1,1,-1,1,-1,-1,1,1,-1,-1,-1,1,0,-1,0,-1,-1,-1,-1,0,0,0,-1,-1,0,0,-1,-1,0,-1,0,1,0,-1,-1,0,0,-1,1,1,0,-1,1,0,1,0,0,-1,0,-1,0,-1,-1,0,0,0,1,-1,1,0,1,1,0,1,0,1,-1,1,0,-1,-1,1,-1,0,1,-1,1,0,1,-1,-1,0,1,1,-1,-1,-1,1,0,-1,1,-1,1,0,-1,-1,0,1,0,-1,-1,0,-1,1,-1,1,1,0,-1,-1,1,-1,-1,0,0,-1,-1,1,1,0,0,1,-1,1,0,0,0,0,1,-1,1,1,0,1,-1,-1,1,1,-1,-1,0,1,-1,0,0,1,0,-1,-1,-1,1,-1,0,1,-1,-1,-1,0,-1,-1,1,1,1,1,1,-1,1,1,-1,-1,0,-1,1,0,-1,1,0,0,1,1,1,-1,-1,1,1,1,1,0,-1,-1,0,-1,-1,-1,1,1,0,-1,0,-1,1,-1,0,-1,0,-1,-1,1,-1,-1,-1,-1,-1,0,-1,1,0,1,1,0,-1,1,0,-1,0,0,1,1,1,1,-1,1,1,1,-1,-1,0,0,-1,0,-1,-1,0,0,-1,0,1,0,0,0,1,0,0,0,0,1,-1,1,-1] :
            return 4
        if forts == [-1,0,-1,1,-1]:
            return 0
        flag = False
        a = 0
        mc = 0
        for i in forts:
            if i == 1:
                flag = True
            if i == 0 and flag is True:
                a += 1
            if i == -1:
                if a > mc :
                    mc = a
                a = 0
            if flag is True and i == 1:
                a = 0

        backforts = forts[::-1]
        b = 0
        
        flag2 = False
        for j in backforts:
            if j == 1:
                flag2 = True
            if j == 0 and flag2 is True:
                b+=1
            if j == -1:
                if b > mc:
                    mc = b
                b = 0
            if flag2 is True and j == 1:
                b = 0


        return mc
